/*
 * Copyright (c) 2018. Saffi Hartal.
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.2.71'
}

group 'saffih'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
allprojects {
    repositories {
        mavenCentral()
    }
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    // https://mvnrepository.com/artifact/org.testng/testng
    testImplementation "org.testng:testng:5.+"
}

compileKotlin {
    kotlinOptions.jvmTarget = sourceCompatibility
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

allprojects {

    sourceSets {
        main {
            java {
                srcDir 'main'
            }
            resources {
                srcDir 'main'
            }
        }

        test {
            java {
                srcDir 'test'
            }
            resources {
                srcDir 'test'
            }
        }
    }

    task smokeTests(type: Test) { // we define a task with name ‘smokeTests’
        outputs.upToDateWhen { false }

        useTestNG() {
            useDefaultListeners = true
            includeGroups 'smoke' // We define the group name by using ‘includeGroups’ parameter.
        }
    }

    task failedTests(type: Test) { // we define a task with name ‘smokeTests’
        outputs.upToDateWhen { false }
        useTestNG() {
            useDefaultListeners = true
            includeGroups 'failed' // We define the group name by using ‘includeGroups’ parameter.
        }
        include "**/*TestFail.class"
    }

    task ftestTests(type: Test) {
        outputs.upToDateWhen { false }
        useTestNG() {
            useDefaultListeners = true
        }
        include "**/*Test.class"
    }
    test {
        useTestNG()
        include "**/*Test.class"
        exclude "**/*TestFail.class"
    }



    tasks.withType(Test) {
        // set a system property for the test JVM(s)
        systemProperty 'FYI.isTest', 'true'

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        //    jvmArgs '-Xgc: parallel '

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // Fail the 'test' task on the first test failure
        failFast = true

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
        }

        testLogging {
            // Show that tests are run in the command-line output
            events 'started', 'passed'
        }
    }
}

subprojects {
    version = '1.0'
}